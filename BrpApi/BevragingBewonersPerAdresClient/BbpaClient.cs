//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.0.6.0 (NJsonSchema v10.0.23.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace BrpApi.BevragingBewonersPerAdresClient
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.6.0 (NJsonSchema v10.0.23.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class BbpaClient
    {
        //private string _baseUrl = "https://virtserver.swaggerhub.com/VNGRealisatie/api/bewoning";
        private string _baseUrl = "https://www.haalcentraal.nl/haalcentraal/api/brp";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public BbpaClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _httpClient.DefaultRequestHeaders.Add("x-api-key", "L9O4h7E1YjnDg9UKEgpdHUzEevl8HyRf");
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="api_version">Bevat de major-versie van de aan te roepen API conform [Landelijke API-strategie](https://geonovum.github.io/KP-APIs/#versioning).</param>
        /// <param name="fields">Geeft de mogelijkheid de inhoud van de body van het antwoord naar behoefte aan te passen. Bevat een door komma's gescheiden lijst van veldennamen. Als niet-bestaande veldnamen worden meegegeven wordt een 400 Bad Request teruggegeven. Wanneer de parameter fields niet is opgenomen, worden alle gedefinieerde velden die een waarde hebben teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/fields.feature)</param>
        /// <param name="peildatum">De datum waarop de resource wordt opgevraagd.</param>
        /// <param name="datumvan">De begindatum van de periode waarover de resource wordt opgevraagd.</param>
        /// <param name="datumtotenmet">De einddatum van de periode waarover de resource wordt opgevraagd.</param>
        /// <param name="huisletter">Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende toevoeging aan een huisnummer in de vorm van een alfanumeriek teken. Dit attribuutsoort is in de BAG gespecificeerd bij het objecttype NUMMERAANDUIDING. Het is bij de ADRESSEERBAAR OBJECT AANDUIDING opgenomen aangezien naast de NUMMERAANDUIDING de OVERIG ADRESSEERBAAR OBJECT AANDUIDING wordt onderscheiden. Aangezien de ADRESSEERBAAR OBJECT AANDUIDING een generalisatie is van NUMMERAANDUIDING en OVERIG ADRESSEERBAAR OBJECT AANDUIDING overerven beide laatstgenoemde objecttypen dit attribuutsoort. Zie verder de toelichting in de BAG. a - z , A – Z</param>
        /// <param name="huisnummer">Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende nummering. Dit attribuutsoort is in de BAG gespecificeerd bij het objecttype NUMMERAANDUIDING. Het is bij de ADRESSEERBAAR OBJECT AANDUIDING opgenomen aangezien naast de NUMMERAANDUIDING de OVERIG ADRESSEERBAAR OBJECT AANDUIDING wordt onderscheiden. Aangezien de ADRESSEERBAAR OBJECT AANDUIDING een generalisatie is van NUMMERAANDUIDING en OVERIG ADRESSEERBAAR OBJECT AANDUIDING overerven beide laatstgenoemde objecttypen dit attribuutsoort. Zie verder de toelichting in de BAG. Alle natuurlijke getallen tussen 1 en 99999.</param>
        /// <param name="huisnummertoevoeging">Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende nadere toevoeging aan een huisnummer of een combinatie van huisnummer en huisletter. Dit attribuutsoort is in de BAG gespecificeerd bij het objecttype NUMMERAANDUIDING. Het is bij de ADRESSEERBAAR OBJECT AANDUIDING opgenomen aangezien naast de NUMMERAANDUIDING de OVERIG ADRESSEERBAAR OBJECT AANDUIDING wordt onderscheiden. Aangezien de ADRESSEERBAAR OBJECT AANDUIDING een generalisatie is van NUMMERAANDUIDING en OVERIG ADRESSEERBAAR OBJECT AANDUIDING overerven beide laatstgenoemde objecttypen dit attribuutsoort. Zie verder de toelichting in de BAG. a - z , A - Z , 0 – 9</param>
        /// <param name="identificatiecodenummeraanduiding">De unieke aanduiding van een NUMMERAANDUIDING. zie toelichting BAG Combinatie van de viercijferige 'gemeentecode' (volgens GBA tabel 33, Gemeententabel), de tweecijferige 'objecttypecode' en een voor het betreffende objecttype binnen een gemeente uniek tiencijferig 'objectvolgnummer'. De objecttypecode kent in de BAG de volgende waarde:20 nummeraanduiding.</param>
        /// <param name="ligplaatsidentificatie">De unieke identificatie van een VERBLIJFSOBJECT. Combinatie van de viercijferige 'gemeentecode' (volgens GBA tabel 33, Gemeententabel), de tweecijferige 'objecttypecode' en een voor het betreffende objecttype binnen een gemeente uniek tiencijferig 'objectvolgnummer'. De objecttypecode kent in de BAG de volgende waarde: 01 verblijfsobject</param>
        /// <param name="naamopenbareruimte">Een door het bevoegde gemeentelijke orgaan aan een OPENBARE RUIMTE toegekende benaming Zie verder de toelichting in de BAG. Tekens gecodeerd volgens de UTF-8 standaard</param>
        /// <param name="postcode">De door PostNL vastgestelde code behorende bij een bepaalde combinatie van een naam van een woonplaats, naam van een openbare ruimte en een huisnummer Dit attribuutsoort is in de BAG gespecificeerd bij het objecttype NUMMERAANDUIDING. Het is bij de ADRESSEERBAAR OBJECT AANDUIDING opgenomen aangezien naast de NUMMERAANDUIDING de OVERIG ADRESSEERBAAR OBJECT AANDUIDING wordt onderscheiden. Aangezien de ADRESSEERBAAR OBJECT AANDUIDING een generalisatie is van NUMMERAANDUIDING en OVERIG ADRESSEERBAAR OBJECT AANDUIDING overerven beide laatstgenoemde objecttypen dit attribuutsoort. Zie verder de toelichting in de BAG.</param>
        /// <param name="standplaatsidentificatie">De unieke identificatie van een VERBLIJFSOBJECT. Combinatie van de viercijferige 'gemeentecode' (volgens GBA tabel 33, Gemeententabel), de tweecijferige 'objecttypecode' en een voor het betreffende objecttype binnen een gemeente uniek tiencijferig 'objectvolgnummer'. De objecttypecode kent in de BAG de volgende waarde: 01 verblijfsobject</param>
        /// <param name="verblijfsobjectidentificatie">De unieke identificatie van een VERBLIJFSOBJECT. Combinatie van de viercijferige 'gemeentecode' (volgens GBA tabel 33, Gemeententabel), de tweecijferige 'objecttypecode' en een voor het betreffende objecttype binnen een gemeente uniek tiencijferig 'objectvolgnummer'. De objecttypecode kent in de BAG de volgende waarde: 01 verblijfsobject</param>
        /// <returns>Zoekactie geslaagd</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<BewoningHalCollectie> GetBewoningenAsync(int? api_version, string fields, System.DateTime? peildatum, System.DateTime? datumvan, System.DateTime? datumtotenmet, string huisletter, int? huisnummer, string huisnummertoevoeging, string identificatiecodenummeraanduiding, string ligplaatsidentificatie, string naamopenbareruimte, string postcode, string standplaatsidentificatie, string verblijfsobjectidentificatie)
        {
            return GetBewoningenAsync(api_version, fields, peildatum, datumvan, datumtotenmet, huisletter, huisnummer, huisnummertoevoeging, identificatiecodenummeraanduiding, ligplaatsidentificatie, naamopenbareruimte, postcode, standplaatsidentificatie, verblijfsobjectidentificatie, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="api_version">Bevat de major-versie van de aan te roepen API conform [Landelijke API-strategie](https://geonovum.github.io/KP-APIs/#versioning).</param>
        /// <param name="fields">Geeft de mogelijkheid de inhoud van de body van het antwoord naar behoefte aan te passen. Bevat een door komma's gescheiden lijst van veldennamen. Als niet-bestaande veldnamen worden meegegeven wordt een 400 Bad Request teruggegeven. Wanneer de parameter fields niet is opgenomen, worden alle gedefinieerde velden die een waarde hebben teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/fields.feature)</param>
        /// <param name="peildatum">De datum waarop de resource wordt opgevraagd.</param>
        /// <param name="datumvan">De begindatum van de periode waarover de resource wordt opgevraagd.</param>
        /// <param name="datumtotenmet">De einddatum van de periode waarover de resource wordt opgevraagd.</param>
        /// <param name="huisletter">Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende toevoeging aan een huisnummer in de vorm van een alfanumeriek teken. Dit attribuutsoort is in de BAG gespecificeerd bij het objecttype NUMMERAANDUIDING. Het is bij de ADRESSEERBAAR OBJECT AANDUIDING opgenomen aangezien naast de NUMMERAANDUIDING de OVERIG ADRESSEERBAAR OBJECT AANDUIDING wordt onderscheiden. Aangezien de ADRESSEERBAAR OBJECT AANDUIDING een generalisatie is van NUMMERAANDUIDING en OVERIG ADRESSEERBAAR OBJECT AANDUIDING overerven beide laatstgenoemde objecttypen dit attribuutsoort. Zie verder de toelichting in de BAG. a - z , A – Z</param>
        /// <param name="huisnummer">Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende nummering. Dit attribuutsoort is in de BAG gespecificeerd bij het objecttype NUMMERAANDUIDING. Het is bij de ADRESSEERBAAR OBJECT AANDUIDING opgenomen aangezien naast de NUMMERAANDUIDING de OVERIG ADRESSEERBAAR OBJECT AANDUIDING wordt onderscheiden. Aangezien de ADRESSEERBAAR OBJECT AANDUIDING een generalisatie is van NUMMERAANDUIDING en OVERIG ADRESSEERBAAR OBJECT AANDUIDING overerven beide laatstgenoemde objecttypen dit attribuutsoort. Zie verder de toelichting in de BAG. Alle natuurlijke getallen tussen 1 en 99999.</param>
        /// <param name="huisnummertoevoeging">Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende nadere toevoeging aan een huisnummer of een combinatie van huisnummer en huisletter. Dit attribuutsoort is in de BAG gespecificeerd bij het objecttype NUMMERAANDUIDING. Het is bij de ADRESSEERBAAR OBJECT AANDUIDING opgenomen aangezien naast de NUMMERAANDUIDING de OVERIG ADRESSEERBAAR OBJECT AANDUIDING wordt onderscheiden. Aangezien de ADRESSEERBAAR OBJECT AANDUIDING een generalisatie is van NUMMERAANDUIDING en OVERIG ADRESSEERBAAR OBJECT AANDUIDING overerven beide laatstgenoemde objecttypen dit attribuutsoort. Zie verder de toelichting in de BAG. a - z , A - Z , 0 – 9</param>
        /// <param name="identificatiecodenummeraanduiding">De unieke aanduiding van een NUMMERAANDUIDING. zie toelichting BAG Combinatie van de viercijferige 'gemeentecode' (volgens GBA tabel 33, Gemeententabel), de tweecijferige 'objecttypecode' en een voor het betreffende objecttype binnen een gemeente uniek tiencijferig 'objectvolgnummer'. De objecttypecode kent in de BAG de volgende waarde:20 nummeraanduiding.</param>
        /// <param name="ligplaatsidentificatie">De unieke identificatie van een VERBLIJFSOBJECT. Combinatie van de viercijferige 'gemeentecode' (volgens GBA tabel 33, Gemeententabel), de tweecijferige 'objecttypecode' en een voor het betreffende objecttype binnen een gemeente uniek tiencijferig 'objectvolgnummer'. De objecttypecode kent in de BAG de volgende waarde: 01 verblijfsobject</param>
        /// <param name="naamopenbareruimte">Een door het bevoegde gemeentelijke orgaan aan een OPENBARE RUIMTE toegekende benaming Zie verder de toelichting in de BAG. Tekens gecodeerd volgens de UTF-8 standaard</param>
        /// <param name="postcode">De door PostNL vastgestelde code behorende bij een bepaalde combinatie van een naam van een woonplaats, naam van een openbare ruimte en een huisnummer Dit attribuutsoort is in de BAG gespecificeerd bij het objecttype NUMMERAANDUIDING. Het is bij de ADRESSEERBAAR OBJECT AANDUIDING opgenomen aangezien naast de NUMMERAANDUIDING de OVERIG ADRESSEERBAAR OBJECT AANDUIDING wordt onderscheiden. Aangezien de ADRESSEERBAAR OBJECT AANDUIDING een generalisatie is van NUMMERAANDUIDING en OVERIG ADRESSEERBAAR OBJECT AANDUIDING overerven beide laatstgenoemde objecttypen dit attribuutsoort. Zie verder de toelichting in de BAG.</param>
        /// <param name="standplaatsidentificatie">De unieke identificatie van een VERBLIJFSOBJECT. Combinatie van de viercijferige 'gemeentecode' (volgens GBA tabel 33, Gemeententabel), de tweecijferige 'objecttypecode' en een voor het betreffende objecttype binnen een gemeente uniek tiencijferig 'objectvolgnummer'. De objecttypecode kent in de BAG de volgende waarde: 01 verblijfsobject</param>
        /// <param name="verblijfsobjectidentificatie">De unieke identificatie van een VERBLIJFSOBJECT. Combinatie van de viercijferige 'gemeentecode' (volgens GBA tabel 33, Gemeententabel), de tweecijferige 'objecttypecode' en een voor het betreffende objecttype binnen een gemeente uniek tiencijferig 'objectvolgnummer'. De objecttypecode kent in de BAG de volgende waarde: 01 verblijfsobject</param>
        /// <returns>Zoekactie geslaagd</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<BewoningHalCollectie> GetBewoningenAsync(int? api_version, string fields, System.DateTime? peildatum, System.DateTime? datumvan, System.DateTime? datumtotenmet, string huisletter, int? huisnummer, string huisnummertoevoeging, string identificatiecodenummeraanduiding, string ligplaatsidentificatie, string naamopenbareruimte, string postcode, string standplaatsidentificatie, string verblijfsobjectidentificatie, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/haalcentraal/bewoningen?");
            if (fields != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fields") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (peildatum != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("peildatum") + "=").Append(System.Uri.EscapeDataString(peildatum.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (datumvan != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("datumvan") + "=").Append(System.Uri.EscapeDataString(datumvan.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (datumtotenmet != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("datumtotenmet") + "=").Append(System.Uri.EscapeDataString(datumtotenmet.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (huisletter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("huisletter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(huisletter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (huisnummer != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("huisnummer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(huisnummer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (huisnummertoevoeging != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("huisnummertoevoeging") + "=").Append(System.Uri.EscapeDataString(ConvertToString(huisnummertoevoeging, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (identificatiecodenummeraanduiding != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("identificatiecodenummeraanduiding") + "=").Append(System.Uri.EscapeDataString(ConvertToString(identificatiecodenummeraanduiding, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ligplaatsidentificatie != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ligplaatsidentificatie") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ligplaatsidentificatie, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (naamopenbareruimte != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("naamopenbareruimte") + "=").Append(System.Uri.EscapeDataString(ConvertToString(naamopenbareruimte, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (postcode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("postcode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(postcode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (standplaatsidentificatie != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("standplaatsidentificatie") + "=").Append(System.Uri.EscapeDataString(ConvertToString(standplaatsidentificatie, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (verblijfsobjectidentificatie != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("verblijfsobjectidentificatie") + "=").Append(System.Uri.EscapeDataString(ConvertToString(verblijfsobjectidentificatie, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (api_version != null)
                        request_.Headers.TryAddWithoutValidation("api-version", ConvertToString(api_version, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/hal+json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BewoningHalCollectie>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BadRequestFoutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<BadRequestFoutbericht>("Bad Request", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Unauthorized", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "403")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Forbidden", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "406")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Not Acceptable", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "409")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Conflict", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "410")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Gone", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "415")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Unsupported Media Type", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "429")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Too Many Requests", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Internal Server Error", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "501")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Not Implemented", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "503")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Service Unavailable", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Er is een onverwachte fout opgetreden", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <param name="api_version">Bevat de major-versie van de aan te roepen API conform [Landelijke API-strategie](https://geonovum.github.io/KP-APIs/#versioning).</param>
        /// <param name="fields">Geeft de mogelijkheid de inhoud van de body van het antwoord naar behoefte aan te passen. Bevat een door komma's gescheiden lijst van veldennamen. Als niet-bestaande veldnamen worden meegegeven wordt een 400 Bad Request teruggegeven. Wanneer de parameter fields niet is opgenomen, worden alle gedefinieerde velden die een waarde hebben teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/fields.feature)</param>
        /// <param name="peildatum">De datum waarop de resource wordt opgevraagd.</param>
        /// <param name="datumvan">De begindatum van de periode waarover de resource wordt opgevraagd.</param>
        /// <param name="datumtotenmet">De einddatum van de periode waarover de resource wordt opgevraagd.</param>
        /// <param name="identificatiecodenummeraanduiding">De unieke aanduiding van een NUMMERAANDUIDING. zie toelichting BAG Combinatie van de viercijferige 'gemeentecode' (volgens GBA tabel 33, Gemeententabel), de tweecijferige 'objecttypecode' en een voor het betreffende objecttype binnen een gemeente uniek tiencijferig 'objectvolgnummer'. De objecttypecode kent in de BAG de volgende waarde:20 nummeraanduiding.</param>
        /// <returns>Zoekactie geslaagd</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<BewoningHal> GetBewoningAsync(int? api_version, string fields, System.DateTime? peildatum, System.DateTime? datumvan, System.DateTime? datumtotenmet, string identificatiecodenummeraanduiding)
        {
            return GetBewoningAsync(api_version, fields, peildatum, datumvan, datumtotenmet, identificatiecodenummeraanduiding, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="api_version">Bevat de major-versie van de aan te roepen API conform [Landelijke API-strategie](https://geonovum.github.io/KP-APIs/#versioning).</param>
        /// <param name="fields">Geeft de mogelijkheid de inhoud van de body van het antwoord naar behoefte aan te passen. Bevat een door komma's gescheiden lijst van veldennamen. Als niet-bestaande veldnamen worden meegegeven wordt een 400 Bad Request teruggegeven. Wanneer de parameter fields niet is opgenomen, worden alle gedefinieerde velden die een waarde hebben teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/fields.feature)</param>
        /// <param name="peildatum">De datum waarop de resource wordt opgevraagd.</param>
        /// <param name="datumvan">De begindatum van de periode waarover de resource wordt opgevraagd.</param>
        /// <param name="datumtotenmet">De einddatum van de periode waarover de resource wordt opgevraagd.</param>
        /// <param name="identificatiecodenummeraanduiding">De unieke aanduiding van een NUMMERAANDUIDING. zie toelichting BAG Combinatie van de viercijferige 'gemeentecode' (volgens GBA tabel 33, Gemeententabel), de tweecijferige 'objecttypecode' en een voor het betreffende objecttype binnen een gemeente uniek tiencijferig 'objectvolgnummer'. De objecttypecode kent in de BAG de volgende waarde:20 nummeraanduiding.</param>
        /// <returns>Zoekactie geslaagd</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<BewoningHal> GetBewoningAsync(int? api_version, string fields, System.DateTime? peildatum, System.DateTime? datumvan, System.DateTime? datumtotenmet, string identificatiecodenummeraanduiding, System.Threading.CancellationToken cancellationToken)
        {
            if (identificatiecodenummeraanduiding == null)
                throw new System.ArgumentNullException("identificatiecodenummeraanduiding");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/haalcentraal/bewoningen/{identificatiecodenummeraanduiding}?");
            urlBuilder_.Replace("{identificatiecodenummeraanduiding}", System.Uri.EscapeDataString(ConvertToString(identificatiecodenummeraanduiding, System.Globalization.CultureInfo.InvariantCulture)));
            if (fields != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fields") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (peildatum != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("peildatum") + "=").Append(System.Uri.EscapeDataString(peildatum.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (datumvan != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("datumvan") + "=").Append(System.Uri.EscapeDataString(datumvan.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (datumtotenmet != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("datumtotenmet") + "=").Append(System.Uri.EscapeDataString(datumtotenmet.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (api_version != null)
                        request_.Headers.TryAddWithoutValidation("api-version", ConvertToString(api_version, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/hal+json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BewoningHal>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BadRequestFoutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<BadRequestFoutbericht>("Bad Request", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Unauthorized", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "403")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Forbidden", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Not Found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "406")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Not Acceptable", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "409")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Conflict", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "410")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Gone", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "415")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Unsupported Media Type", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "429")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Too Many Requests", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Internal Server Error", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "501")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Not Implemented", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "503")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Service Unavailable", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Er is een onverwachte fout opgetreden", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <param name="api_version">Bevat de major-versie van de aan te roepen API conform [Landelijke API-strategie](https://geonovum.github.io/KP-APIs/#versioning).</param>
        /// <param name="fields">Geeft de mogelijkheid de inhoud van de body van het antwoord naar behoefte aan te passen. Bevat een door komma's gescheiden lijst van veldennamen. Als niet-bestaande veldnamen worden meegegeven wordt een 400 Bad Request teruggegeven. Wanneer de parameter fields niet is opgenomen, worden alle gedefinieerde velden die een waarde hebben teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/fields.feature)</param>
        /// <param name="peildatum">De datum waarop de resource wordt opgevraagd.</param>
        /// <param name="datumvan">De begindatum van de periode waarover de resource wordt opgevraagd.</param>
        /// <param name="datumtotenmet">De einddatum van de periode waarover de resource wordt opgevraagd.</param>
        /// <param name="identificatiecodenummeraanduiding">De unieke aanduiding van een NUMMERAANDUIDING. zie toelichting BAG Combinatie van de viercijferige 'gemeentecode' (volgens GBA tabel 33, Gemeententabel), de tweecijferige 'objecttypecode' en een voor het betreffende objecttype binnen een gemeente uniek tiencijferig 'objectvolgnummer'. De objecttypecode kent in de BAG de volgende waarde:20 nummeraanduiding.</param>
        /// <returns>Zoekactie geslaagd</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Verloop> GetBewoningverloopAsync(int? api_version, string fields, System.DateTime? peildatum, System.DateTime? datumvan, System.DateTime? datumtotenmet, string identificatiecodenummeraanduiding)
        {
            return GetBewoningverloopAsync(api_version, fields, peildatum, datumvan, datumtotenmet, identificatiecodenummeraanduiding, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="api_version">Bevat de major-versie van de aan te roepen API conform [Landelijke API-strategie](https://geonovum.github.io/KP-APIs/#versioning).</param>
        /// <param name="fields">Geeft de mogelijkheid de inhoud van de body van het antwoord naar behoefte aan te passen. Bevat een door komma's gescheiden lijst van veldennamen. Als niet-bestaande veldnamen worden meegegeven wordt een 400 Bad Request teruggegeven. Wanneer de parameter fields niet is opgenomen, worden alle gedefinieerde velden die een waarde hebben teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/fields.feature)</param>
        /// <param name="peildatum">De datum waarop de resource wordt opgevraagd.</param>
        /// <param name="datumvan">De begindatum van de periode waarover de resource wordt opgevraagd.</param>
        /// <param name="datumtotenmet">De einddatum van de periode waarover de resource wordt opgevraagd.</param>
        /// <param name="identificatiecodenummeraanduiding">De unieke aanduiding van een NUMMERAANDUIDING. zie toelichting BAG Combinatie van de viercijferige 'gemeentecode' (volgens GBA tabel 33, Gemeententabel), de tweecijferige 'objecttypecode' en een voor het betreffende objecttype binnen een gemeente uniek tiencijferig 'objectvolgnummer'. De objecttypecode kent in de BAG de volgende waarde:20 nummeraanduiding.</param>
        /// <returns>Zoekactie geslaagd</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Verloop> GetBewoningverloopAsync(int? api_version, string fields, System.DateTime? peildatum, System.DateTime? datumvan, System.DateTime? datumtotenmet, string identificatiecodenummeraanduiding, System.Threading.CancellationToken cancellationToken)
        {
            if (identificatiecodenummeraanduiding == null)
                throw new System.ArgumentNullException("identificatiecodenummeraanduiding");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/haalcentraal/bewoningen/{identificatiecodenummeraanduiding}/verloop?");
            urlBuilder_.Replace("{identificatiecodenummeraanduiding}", System.Uri.EscapeDataString(ConvertToString(identificatiecodenummeraanduiding, System.Globalization.CultureInfo.InvariantCulture)));
            if (fields != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fields") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (peildatum != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("peildatum") + "=").Append(System.Uri.EscapeDataString(peildatum.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (datumvan != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("datumvan") + "=").Append(System.Uri.EscapeDataString(datumvan.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (datumtotenmet != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("datumtotenmet") + "=").Append(System.Uri.EscapeDataString(datumtotenmet.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (api_version != null)
                        request_.Headers.TryAddWithoutValidation("api-version", ConvertToString(api_version, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/hal+json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Verloop>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BadRequestFoutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<BadRequestFoutbericht>("Bad Request", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Unauthorized", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "403")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Forbidden", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Not Found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "406")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Not Acceptable", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "409")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Conflict", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "410")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Gone", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "415")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Unsupported Media Type", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "429")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Too Many Requests", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Internal Server Error", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "501")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Not Implemented", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "503")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Service Unavailable", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Er is een onverwachte fout opgetreden", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <param name="api_version">Bevat de major-versie van de aan te roepen API conform [Landelijke API-strategie](https://geonovum.github.io/KP-APIs/#versioning).</param>
        /// <param name="fields">Geeft de mogelijkheid de inhoud van de body van het antwoord naar behoefte aan te passen. Bevat een door komma's gescheiden lijst van veldennamen. Als niet-bestaande veldnamen worden meegegeven wordt een 400 Bad Request teruggegeven. Wanneer de parameter fields niet is opgenomen, worden alle gedefinieerde velden die een waarde hebben teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/fields.feature)</param>
        /// <param name="identificatiecodenummeraanduiding">De unieke aanduiding van een NUMMERAANDUIDING. zie toelichting BAG Combinatie van de viercijferige 'gemeentecode' (volgens GBA tabel 33, Gemeententabel), de tweecijferige 'objecttypecode' en een voor het betreffende objecttype binnen een gemeente uniek tiencijferig 'objectvolgnummer'. De objecttypecode kent in de BAG de volgende waarde:20 nummeraanduiding.</param>
        /// <returns>Zoekactie geslaagd</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<HoofdBewonerCollectieHal> GetHoofdbewonersAsync(int? api_version, string fields, string identificatiecodenummeraanduiding)
        {
            return GetHoofdbewonersAsync(api_version, fields, identificatiecodenummeraanduiding, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="api_version">Bevat de major-versie van de aan te roepen API conform [Landelijke API-strategie](https://geonovum.github.io/KP-APIs/#versioning).</param>
        /// <param name="fields">Geeft de mogelijkheid de inhoud van de body van het antwoord naar behoefte aan te passen. Bevat een door komma's gescheiden lijst van veldennamen. Als niet-bestaande veldnamen worden meegegeven wordt een 400 Bad Request teruggegeven. Wanneer de parameter fields niet is opgenomen, worden alle gedefinieerde velden die een waarde hebben teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/fields.feature)</param>
        /// <param name="identificatiecodenummeraanduiding">De unieke aanduiding van een NUMMERAANDUIDING. zie toelichting BAG Combinatie van de viercijferige 'gemeentecode' (volgens GBA tabel 33, Gemeententabel), de tweecijferige 'objecttypecode' en een voor het betreffende objecttype binnen een gemeente uniek tiencijferig 'objectvolgnummer'. De objecttypecode kent in de BAG de volgende waarde:20 nummeraanduiding.</param>
        /// <returns>Zoekactie geslaagd</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HoofdBewonerCollectieHal> GetHoofdbewonersAsync(int? api_version, string fields, string identificatiecodenummeraanduiding, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/haalcentraal/hoofbewoners?");
            if (fields != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fields") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (identificatiecodenummeraanduiding != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("identificatiecodenummeraanduiding") + "=").Append(System.Uri.EscapeDataString(ConvertToString(identificatiecodenummeraanduiding, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (api_version != null)
                        request_.Headers.TryAddWithoutValidation("api-version", ConvertToString(api_version, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/hal+json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HoofdBewonerCollectieHal>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BadRequestFoutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<BadRequestFoutbericht>("Bad Request", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Unauthorized", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "403")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Forbidden", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Not Found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "406")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Not Acceptable", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "409")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Conflict", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "410")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Gone", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "415")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Unsupported Media Type", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "429")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Too Many Requests", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Internal Server Error", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "501")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Not Implemented", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "503")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Service Unavailable", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Er is een onverwachte fout opgetreden", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
                }
            }
            else if (value is bool)
            {
                return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            return System.Convert.ToString(value, cultureInfo);
        }
    }

    /// <summary>&lt;body&gt;&lt;p&gt;Een bewoning is een adres waar op enig moment in de tijd een of meerdere personen is ingeschreven. Daarmee is dit adres een veblijfplaats, of is dit adres in het verleden een verblijfplaats geweest.&lt;br/&gt; &lt;/p&gt;&lt;/body&gt;</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Bewoning
    {
        [Newtonsoft.Json.JsonProperty("bewoners", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Bewoner> Bewoners { get; set; }

        [Newtonsoft.Json.JsonProperty("functieadres", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SoortAdres_enum Functieadres { get; set; }

        /// <summary>&lt;body&gt;Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende toevoeging aan een huisnummer in de vorm van een alfanumeriek teken.&lt;/body&gt;&lt;body&gt;Dit attribuutsoort is in de BAG gespecificeerd bij het objecttype NUMMERAANDUIDING. Het is bij de ADRESSEERBAAR OBJECT AANDUIDING opgenomen aangezien naast de NUMMERAANDUIDING de OVERIG ADRESSEERBAAR OBJECT AANDUIDING wordt onderscheiden. Aangezien de ADRESSEERBAAR OBJECT AANDUIDING een generalisatie is van NUMMERAANDUIDING en OVERIG ADRESSEERBAAR OBJECT AANDUIDING overerven beide laatstgenoemde objecttypen dit attribuutsoort. Zie verder de toelichting in de BAG.&lt;/body&gt;&lt;body&gt;a - z , A – Z&lt;/body&gt;</summary>
        [Newtonsoft.Json.JsonProperty("huisletter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string Huisletter { get; set; }

        /// <summary>&lt;body&gt;Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende nummering.&lt;/body&gt;&lt;body&gt;Dit attribuutsoort is in de BAG gespecificeerd bij het objecttype NUMMERAANDUIDING. Het is bij de ADRESSEERBAAR OBJECT AANDUIDING opgenomen aangezien naast de NUMMERAANDUIDING de OVERIG ADRESSEERBAAR OBJECT AANDUIDING wordt onderscheiden. Aangezien de ADRESSEERBAAR OBJECT AANDUIDING een generalisatie is van NUMMERAANDUIDING en OVERIG ADRESSEERBAAR OBJECT AANDUIDING overerven beide laatstgenoemde objecttypen dit attribuutsoort. Zie verder de toelichting in de BAG.&lt;/body&gt;&lt;body&gt;Alle natuurlijke getallen tussen 1 en 99999.&lt;/body&gt;</summary>
        [Newtonsoft.Json.JsonProperty("huisnummer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(int.MinValue, 99999)]
        public int Huisnummer { get; set; }

        /// <summary>&lt;body&gt;Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende nadere toevoeging aan een huisnummer of een combinatie van huisnummer en huisletter.&lt;/body&gt;&lt;body&gt;Dit attribuutsoort is in de BAG gespecificeerd bij het objecttype NUMMERAANDUIDING. Het is bij de ADRESSEERBAAR OBJECT AANDUIDING opgenomen aangezien naast de NUMMERAANDUIDING de OVERIG ADRESSEERBAAR OBJECT AANDUIDING wordt onderscheiden. Aangezien de ADRESSEERBAAR OBJECT AANDUIDING een generalisatie is van NUMMERAANDUIDING en OVERIG ADRESSEERBAAR OBJECT AANDUIDING overerven beide laatstgenoemde objecttypen dit attribuutsoort. Zie verder de toelichting in de BAG.&lt;/body&gt;&lt;body&gt;a - z , A - Z , 0 – 9&lt;/body&gt;</summary>
        [Newtonsoft.Json.JsonProperty("huisnummertoevoeging", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        public string Huisnummertoevoeging { get; set; }

        /// <summary>&lt;body&gt;De unieke aanduiding van een NUMMERAANDUIDING.&lt;/body&gt;&lt;body&gt;zie toelichting BAG&lt;/body&gt;&lt;body&gt;Combinatie van de viercijferige 'gemeentecode' (volgens GBA tabel 33, Gemeententabel), de tweecijferige 'objecttypecode' en een voor het betreffende objecttype binnen een gemeente uniek tiencijferig 'objectvolgnummer'. De objecttypecode kent in de BAG de volgende waarde:20 nummeraanduiding.&lt;/body&gt;</summary>
        [Newtonsoft.Json.JsonProperty("identificatiecodeNummeraanduiding", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string IdentificatiecodeNummeraanduiding { get; set; }

        /// <summary>&lt;body&gt;Een door het bevoegde gemeentelijke orgaan aan een OPENBARE RUIMTE toegekende benaming&lt;/body&gt;&lt;body&gt;Zie verder de toelichting in de BAG.&lt;/body&gt;&lt;body&gt;Tekens gecodeerd volgens de UTF-8 standaard&lt;/body&gt;</summary>
        [Newtonsoft.Json.JsonProperty("naamOpenbareRuimte", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string NaamOpenbareRuimte { get; set; }

        /// <summary>&lt;body&gt;De door PostNL vastgestelde code behorende bij een bepaalde combinatie van een naam van een woonplaats, naam van een openbare ruimte en een huisnummer&lt;/body&gt;&lt;body&gt;Dit attribuutsoort is in de BAG gespecificeerd bij het objecttype NUMMERAANDUIDING. Het is bij de ADRESSEERBAAR OBJECT AANDUIDING opgenomen aangezien naast de NUMMERAANDUIDING de OVERIG ADRESSEERBAAR OBJECT AANDUIDING wordt onderscheiden. Aangezien de ADRESSEERBAAR OBJECT AANDUIDING een generalisatie is van NUMMERAANDUIDING en OVERIG ADRESSEERBAAR OBJECT AANDUIDING overerven beide laatstgenoemde objecttypen dit attribuutsoort. Zie verder de toelichting in de BAG.&lt;/body&gt;</summary>
        [Newtonsoft.Json.JsonProperty("postcode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[1-9]{1}[0-9]{3}[A-Z]{2}$")]
        public string Postcode { get; set; }

        /// <summary>&lt;body&gt;De unieke identificatie van een VERBLIJFSOBJECT, LIGPLAATS of STANDPLAATS .&lt;/body&gt;&lt;body&gt;Combinatie van de viercijferige 'gemeentecode' (volgens GBA tabel 33, Gemeententabel), de tweecijferige 'objecttypecode' en een voor het betreffende objecttype binnen een gemeente uniek tiencijferig 'objectvolgnummer'. De objecttypecode kent in de BAG de volgende waarde: 01 verblijfsobject&lt;/body&gt;</summary>
        [Newtonsoft.Json.JsonProperty("identificatiecodeAdresseerbaarObject", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string IdentificatiecodeAdresseerbaarObject { get; set; }

        /// <summary>&lt;body&gt;De door het bevoegde gemeentelijke orgaan aan een WOONPLAATS toegekende benaming.&lt;/body&gt;&lt;body&gt;Zie verder de toelichting in de BAG.&lt;/body&gt;&lt;body&gt;Tekens gecodeerd volgens de UTF-8 standaard.&lt;/body&gt;</summary>
        [Newtonsoft.Json.JsonProperty("woonplaatsnaam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Woonplaatsnaam { get; set; }

        [Newtonsoft.Json.JsonProperty("_links", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Bewoning_links _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BewoningHal : Bewoning
    {
        [Newtonsoft.Json.JsonProperty("_links", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Bewoning_links _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BewoningHalCollectie
    {
        [Newtonsoft.Json.JsonProperty("_links", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HalCollectionLinks _links { get; set; }

        [Newtonsoft.Json.JsonProperty("_embedded", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BewoningHalCollectie__embedded _embedded { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>&lt;body&gt;&lt;p&gt; &lt;strong&gt;Dit betreft een historische resource. De BEWONER kan in het verleden een ingeschreven persoon zijn geweest, maar nu niet meer ingeschreven zijn&lt;/strong&gt; &lt;/p&gt;&lt;p&gt;
    ///  &lt;em&gt;*&lt;/em&gt; datumIngangGeldigheid** : Datum waarop de gegevens over de bewoning geldig zijn geworden.&lt;/p&gt;&lt;p&gt;
    ///  &lt;em&gt;*&lt;/em&gt; datumEindeGeldigheid** : Datum waarop de geldigheid van de gegevens over de bewoning beeindigd is.&lt;/p&gt;&lt;/body&gt;</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Bewoner
    {
        [Newtonsoft.Json.JsonProperty("datumTotenMet", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Datum_onvolledig DatumTotenMet { get; set; }

        [Newtonsoft.Json.JsonProperty("datumVan", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Datum_onvolledig DatumVan { get; set; }

        [Newtonsoft.Json.JsonProperty("geboortedatum", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Geboortedatum Geboortedatum { get; set; }

        [Newtonsoft.Json.JsonProperty("geslachtsaanduiding", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Geslacht_enum Geslachtsaanduiding { get; set; }

        /// <summary>&lt;body&gt;&lt;p&gt;Leeftijd in jaren op het moment van bevraging&lt;/p&gt;&lt;/body&gt;</summary>
        [Newtonsoft.Json.JsonProperty("leeftijd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(int.MinValue, 999)]
        public int Leeftijd { get; set; }

        [Newtonsoft.Json.JsonProperty("naam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Naam Naam { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>&lt;body&gt;&lt;p&gt; &lt;strong&gt;Dit betreft een historische resource. De BEWONER kan in het verleden een ingeschreven persoon zijn geweest, maar nu niet meer ingeschreven zijn&lt;/strong&gt; &lt;/p&gt;&lt;p&gt;
    ///  &lt;em&gt;*&lt;/em&gt; datumIngangGeldigheid** : Datum waarop de gegevens over de bewoning geldig zijn geworden.&lt;/p&gt;&lt;p&gt;
    ///  &lt;em&gt;*&lt;/em&gt; datumEindeGeldigheid** : Datum waarop de geldigheid van de gegevens over de bewoning beeindigd is.&lt;/p&gt;&lt;/body&gt;</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class HoofdBewoner
    {
        [Newtonsoft.Json.JsonProperty("datumTotenMet", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Datum_onvolledig DatumTotenMet { get; set; }

        [Newtonsoft.Json.JsonProperty("datumVan", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Datum_onvolledig DatumVan { get; set; }

        [Newtonsoft.Json.JsonProperty("geboortedatum", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Geboortedatum Geboortedatum { get; set; }

        [Newtonsoft.Json.JsonProperty("geslachtsaanduiding", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Geslacht_enum Geslachtsaanduiding { get; set; }

        /// <summary>&lt;body&gt;&lt;p&gt;Leeftijd in jaren op het moment van bevraging&lt;/p&gt;&lt;/body&gt;</summary>
        [Newtonsoft.Json.JsonProperty("leeftijd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(int.MinValue, 999)]
        public int Leeftijd { get; set; }

        [Newtonsoft.Json.JsonProperty("naam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NaamHoofdbewoner Naam { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class HoofdBewonerHal : HoofdBewoner
    {
        [Newtonsoft.Json.JsonProperty("_links", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HoofdBewoner_links _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class HoofdBewonerCollectieHal
    {
        [Newtonsoft.Json.JsonProperty("_links", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HalCollectionLinks _links { get; set; }

        [Newtonsoft.Json.JsonProperty("_embedded", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HoofdBewonerCollectieHal__embedded _embedded { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>&lt;body&gt;&lt;p&gt;Gegevens over de geboorte van respectievelijk de persoon, de ouder, de echtgenoot/geregistreerd partner, de eerdere echtgenoot/geregistreerd partner of het kind.&lt;/p&gt;&lt;p&gt;
    ///  &lt;em&gt;*&lt;/em&gt; datum** : Datum waarop de persoon is geboren.&lt;/p&gt;&lt;p&gt;
    ///  &lt;em&gt;*&lt;/em&gt; land** : Land waar de persoon is geboren&lt;/p&gt;&lt;p&gt;
    ///  &lt;em&gt;*&lt;/em&gt; plaats** : De plaats waar een persoon is geboren. Voor een plaats buiten Nederland is gemeentecode=1999 (RNI) en gemeentenaam de buitenlandse plaatsnaam of aanduiding.&lt;/p&gt;&lt;/body&gt;</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Geboortedatum
    {
        [Newtonsoft.Json.JsonProperty("datum", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Datum_onvolledig Datum { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>&lt;body&gt;&lt;p&gt;Gegevens over de naam van de NATUURLIJK PERSOON&lt;/p&gt;&lt;p&gt;
    ///  &lt;em&gt;*&lt;/em&gt; adellijketitelPredikaat** : Tabel Adellijke titel/predikaat, die aangeeft welke titel of welk predikaat behoort tot de naam (bij adellijke titel geslachtsnaam, bij predikaat voornaam).&lt;/p&gt;&lt;/body&gt;</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Naam
    {
        /// <summary>&lt;body&gt;De (geslachts)naam waarvan de eventueel aanwezige voorvoegsels en adellijke titel/predikaat zijn afgesplitst.&lt;/body&gt;</summary>
        [Newtonsoft.Json.JsonProperty("geslachtsnaam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Geslachtsnaam { get; set; }

        [Newtonsoft.Json.JsonProperty("inOnderzoek", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NaamInOnderzoek InOnderzoek { get; set; }

        /// <summary>&lt;body&gt;De voorletters waarmee een persoon aangeschreven wil worden.&lt;/body&gt;&lt;body&gt;&lt;p&gt;De voorlettes zijn afgeleid van de voornamen.&lt;/p&gt;&lt;/body&gt;&lt;body&gt;&lt;/body&gt;</summary>
        [Newtonsoft.Json.JsonProperty("voorletters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Voorletters { get; set; }

        /// <summary>&lt;body&gt;De verzameling namen die, gescheiden door spaties, aan de geslachtsnaam voorafgaat.&lt;/body&gt;&lt;body&gt;&lt;p&gt;De verzameling namen die, gescheiden door spaties, aan de geslachtsnaam voorafgaat.&lt;/p&gt;&lt;/body&gt;</summary>
        [Newtonsoft.Json.JsonProperty("voornamen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Voornamen { get; set; }

        /// <summary>&lt;body&gt;Dat deel van de geslachtsnaam dat voorkomt in de Voorvoegseltabel en, gescheiden door een spatie, vooraf gaat aan de rest van de geslachtsnaam.&lt;/body&gt;</summary>
        [Newtonsoft.Json.JsonProperty("voorvoegsel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string Voorvoegsel { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Gegevens over de naam van de persoon</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class NaamHoofdbewoner
    {
        /// <summary>De aanhef zoals die in een brief, gericht aan een persoon gebruikt kan worden. Hoe het samenstellen van een aanhef te werk gaat is beschreven in de [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/aanhef.feature)</summary>
        [Newtonsoft.Json.JsonProperty("aanhef", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Aanhef { get; set; }

        /// <summary>Samengestelde naam zoals die in communicatie met de persoon gebruikt kan worden. Hoe het samenstellen van een aanschrijfwijze te werk gaat is beschreven in de [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/aanschrijfwijze.feature)</summary>
        [Newtonsoft.Json.JsonProperty("aanschrijfwijze", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Aanschrijfwijze { get; set; }

        /// <summary>De naam zoals die in lopende tekst kan worden. Hoe het samenstellen van een naam in de lopendetekst te werk gaat is beschreven in de [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/gebruik_in_lopende_tekst.feature)</summary>
        [Newtonsoft.Json.JsonProperty("gebruikInLopendeTekst", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GebruikInLopendeTekst { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>&lt;body&gt;&lt;p&gt;In onderzoekgroep om aan te geven of gegevens over de naam van de Ingeschreven persoon in onderzoek zijn.&lt;/p&gt;&lt;p&gt;Zie de &lt;a href=`https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/in_onderzoek.feature`&gt; functionele specificaties &lt;a&gt;&lt;/p&gt;&lt;/body&gt;</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class NaamInOnderzoek
    {
        [Newtonsoft.Json.JsonProperty("datumIngangOnderzoek", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Datum_onvolledig DatumIngangOnderzoek { get; set; }

        /// <summary>&lt;body&gt;&lt;p&gt;Indicator die aangeeft of het corresponderende gegeven voor deze persoon in onderzoek is.&lt;/p&gt;&lt;/body&gt;</summary>
        [Newtonsoft.Json.JsonProperty("geslachtsnaam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Geslachtsnaam { get; set; }

        /// <summary>&lt;body&gt;&lt;p&gt;Indicator die aangeeft of het corresponderende gegeven voor deze persoon in onderzoek is.&lt;/p&gt;&lt;/body&gt;</summary>
        [Newtonsoft.Json.JsonProperty("voornamen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Voornamen { get; set; }

        /// <summary>&lt;body&gt;&lt;p&gt;Indicator die aangeeft of het corresponderende gegeven voor deze persoon in onderzoek is.&lt;/p&gt;&lt;/body&gt;</summary>
        [Newtonsoft.Json.JsonProperty("voorvoegsel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Voorvoegsel { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Verloop
    {
        /// <summary>&lt;body&gt;&lt;p&gt;De gemiddelde duur van de bewoning (in maanden) over een bepaalde periode.&lt;/p&gt;&lt;/body&gt;</summary>
        [Newtonsoft.Json.JsonProperty("bewoningsduur", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Bewoningsduur { get; set; }

        /// <summary>&lt;body&gt;&lt;p&gt;Het aantal verhuisbewegingen naar dit adres toe van gezinnen of alleenstaanden.&lt;/p&gt;&lt;/body&gt;</summary>
        [Newtonsoft.Json.JsonProperty("inVerhuizingen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string InVerhuizingen { get; set; }

        /// <summary>&lt;body&gt;&lt;p&gt;Het aantal verhuisbewegingen naar dit adres toe van gezinnen of alleenstaanden.&lt;/p&gt;&lt;/body&gt;</summary>
        [Newtonsoft.Json.JsonProperty("uitVerhuizingen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UitVerhuizingen { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Bewoning_links
    {
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HalLink Self { get; set; }

        [Newtonsoft.Json.JsonProperty("nummeraanduiding", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Nummeraanduiding Nummeraanduiding { get; set; }

        [Newtonsoft.Json.JsonProperty("adresseerbaarObject", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AdresseerbaarObject AdresseerbaarObject { get; set; }

        [Newtonsoft.Json.JsonProperty("ingeschrevenpersonen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<HalLink> Ingeschrevenpersonen { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class HoofdBewoner_links
    {
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HalLink Self { get; set; }

        [Newtonsoft.Json.JsonProperty("ingeschrevenpersonen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<HalLink> Ingeschrevenpersonen { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>&lt;body&gt;&lt;p&gt;Een aanduiding die aangeeft dat de ingeschrevene een man of een vrouw is, of dat het geslacht (nog) onbekend is&lt;/p&gt;&lt;/body&gt;:
    /// * `man` - M
    /// * `vrouw` - V
    /// * `onbekend` - O</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Geslacht_enum
    {
        [System.Runtime.Serialization.EnumMember(Value = @"man")]
        Man = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"vrouw")]
        Vrouw = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"onbekend")]
        Onbekend = 2,

    }

    /// <summary>&lt;body&gt;&lt;p&gt;Aanduiding van het soort adres.&lt;/p&gt;&lt;/body&gt;:
    /// * `woonadres` - W
    /// * `briefadres` - B</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SoortAdres_enum
    {
        [System.Runtime.Serialization.EnumMember(Value = @"woonadres")]
        Woonadres = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"briefadres")]
        Briefadres = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BadRequestFoutbericht : Foutbericht
    {
        /// <summary>Foutmelding per fout in een parameter. Alle gevonden fouten worden één keer teruggemeld.</summary>
        [Newtonsoft.Json.JsonProperty("invalid-params", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<InvalidParams> InvalidParams { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Terugmelding bij een fout. JSON representatie in lijn met [RFC7807](https://tools.ietf.org/html/rfc7807).</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Foutbericht
    {
        /// <summary>Link naar meer informatie over deze fout</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Type { get; set; }

        /// <summary>Beschrijving van de fout</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>Http status code</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Status { get; set; }

        /// <summary>Details over de fout</summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }

        /// <summary>Uri van de aanroep die de fout heeft veroorzaakt</summary>
        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Instance { get; set; }

        /// <summary>Systeemcode die het type fout aangeeft</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Code { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Details over fouten in opgegeven parameters</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class InvalidParams
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Type { get; set; }

        /// <summary>Naam van de parameter</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>Systeemcode die het type fout aangeeft</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Code { get; set; }

        /// <summary>Beschrijving van de fout op de parameterwaarde</summary>
        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reason { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class HalCollectionLinks
    {
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HalLink Self { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class HalLink
    {
        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Href { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Gegevens over de datums die mogelijk niet volledig zijn, maar waarvan de bekende gedeeltes wel moeten kunnen worden uitgewisseld. Als de volledige datum bekend is worden alle elementen gevuld.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Datum_onvolledig
    {
        /// <summary>De dag. Als de dag van de datum bekend is wordt deze hier ingevuld. Ook als de volledige datum bekend is.</summary>
        [Newtonsoft.Json.JsonProperty("dag", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, 31)]
        public int Dag { get; set; }

        /// <summary>De volledige datum die in de `date` definitie past. Dit element wordt alleen gevuld als de volledige datum bekend is.</summary>
        [Newtonsoft.Json.JsonProperty("datum", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime Datum { get; set; }

        /// <summary>Het jaar van de datum. Als het jaar bekend is wordt dit element gevuld, ook als de volledige datum bekend is.</summary>
        [Newtonsoft.Json.JsonProperty("jaar", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(int.MinValue, 9999)]
        public int Jaar { get; set; }

        /// <summary>De maand. Als de maand van een datum bekend is wordt deze hier ingevuld. Ook als de volledige datum is ingevuld.</summary>
        [Newtonsoft.Json.JsonProperty("maand", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, 12)]
        public int Maand { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BewoningHalCollectie__embedded
    {
        [Newtonsoft.Json.JsonProperty("bewoningen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BewoningHal> Bewoningen { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class HoofdBewonerCollectieHal__embedded
    {
        [Newtonsoft.Json.JsonProperty("bewoningen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<HoofdBewonerHal> Bewoningen { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Nummeraanduiding : HalLink
    {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AdresseerbaarObject : HalLink
    {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.6.0 (NJsonSchema v10.0.23.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + response.Substring(0, response.Length >= 512 ? 512 : response.Length), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.6.0 (NJsonSchema v10.0.23.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore 472
#pragma warning restore 114
#pragma warning restore 108
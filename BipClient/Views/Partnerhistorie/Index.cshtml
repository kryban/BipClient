@model IEnumerable<Bip.Partnerhistorie>

@{
    ViewData["Title"] = "Partnerhistorie";

    Object ReturnProp(String name, Object obj)
    {
        foreach (String part in name.Split(' '))
        {
            if (obj == null) { return null; }

            Type type = obj.GetType();
            var info = type.GetProperty(part);
            if (info == null) { return null; }

            obj = info.GetValue(obj, null);
        }

        return obj;
    }

    IEnumerable<object> ReturnIEnumerable(object obj)
    {
        return ((IEnumerable<object>)obj).Cast<object>().ToList();
    }

}

<script type="text/javascript">

    function colorRelevant(id) {

        $(".searchBox").css("border", "1px solid black").css("background", "white");;

        if (id === "bsnZoek") {
            $("#bsnZoek").css("border", "2px solid green").css("background", "lightgreen");
        }
    };

</script>

<script type="text/javascript">

    $(document).ready(function () {
        var aantal = 0
        $('table tbody').each(function () {
            //var num = $(this).children().length;
            // alert(num);
            aantal++;
            $(this).before("<button id='header' class='header' style:'cursor:pointer;'> Resultaat " + aantal + " </button>");
            //alert($(this).html());
            $(this).hide();
        });
        $('.header').on('click', function () {
            $(this).next().slideToggle("slow");
        });
    });

</script>

<h2>Partnerhistorie</h2>

@using (Html.BeginForm("Zoek", "Partnerhistorie", FormMethod.Post))
{
    <form>
        <div>
            <input onfocus="colorRelevant(this.id)" class="searchBox" type="text" placeholder="apiVersion" id="apiVersionZoek" name="apiVersionZoek">
            <input onfocus="colorRelevant(this.id)" class="searchBox" type="text" placeholder="fields" id="fieldsZoek" name="fieldsZoek">
            <input onfocus="colorRelevant(this.id)" class="searchBox" type="text" placeholder="bsn" id="bsnZoek" name="bsnZoek" required>
            <input onfocus="colorRelevant(this.id)" class="searchBox" type="date" placeholder="peilDatum" id="peilDatumZoek" name="peilDatumZoek">
            <input onfocus="colorRelevant(this.id)" class="searchBox" type="date" placeholder="periodeVan" id="periodeVanZoek" name="periodeVanZoek">
            <input onfocus="colorRelevant(this.id)" class="searchBox" type="date" placeholder="periodeTot" id="periodeTotZoek" name="periodeTotZoek">

            <button type="submit">Zoek</button>

        </div>
    </form>
}

<div>
    Het ophalen van de partnerhistorie van een ingeschreven persoon. Van een ingeschreven persoon worden partners waarmee in het verleden relaties geregistreerd zijn 
    geretourneerd die geldig waren op de (optioneel) opgegeven peildatum (geldigop) of die geldig waren binnen de (optioneel) opgegeven periode (geldigvan tot geldigtot).
</div>

@*<table class="table">
        <thead>
            <tr>
                <th>@Html.DisplayName("-")</th>
            </tr>
        </thead>
        <tbody>
            <br />

            @foreach (var mod in Model)
            {
                @foreach (var prop in typeof(Bip.IngeschrevenPersoon).GetProperties().ToList())
                {
                    <tr>
                        <td style="font-weight:600">@Html.DisplayFor(m => prop.Name)</td>
                        <td>@prop.GetValue(mod)</td>
                    </tr>

                    if ((!prop.PropertyType.Namespace.StartsWith("System") || prop.PropertyType.Namespace.Contains("Collection")) && !prop.PropertyType.Name.Contains("IDictionary"))
                    {
                        @foreach (var d in prop.PropertyType.GetProperties().ToList())
                        {
                            var propObj = @ReturnProp(prop.Name, mod);
                            Object propVal = null;

                            if (prop.PropertyType.Name.Contains("Collection"))
                            {
                                var foo = @prop.GetValue(mod);
                                if (foo != null)
                                {
                                    var bar = ReturnIEnumerable(foo);

                                    foreach (var b in bar)
                                    {
                                        foreach (var subTypeProp in b.GetType().GetProperties().ToList())
                                        {
                                            <tr>
                                                <td style="color:lightslategray; font-size:80%"><i>@Html.DisplayFor(m => subTypeProp.Name)</i></td>
                                                <td style="color:lightslategray; font-size:80%">@subTypeProp.GetValue(b)</td>
                                            </tr>
                                        }
                                    }
                                }
                            }

                            else if (propObj != null)
                            {
                                propVal = propObj.GetType().GetProperty(d.Name).GetValue(propObj, null);
                            }

                            <tr>
                                <td><i>@Html.DisplayFor(m => d.Name)</i></td>
                                <td>@propVal</td>
                            </tr>
                        }
                    }
                }
            }
        </tbody>
    </table>*@

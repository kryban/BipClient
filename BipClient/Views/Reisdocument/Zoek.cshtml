@model Bip.Reisdocument

@{
    ViewData["Title"] = "Reisdocument";

    Object ReturnProp(String name, Object obj)
    {
        foreach (String part in name.Split(' '))
        {
            if (obj == null) { return null; }

            Type type = obj.GetType();
            var info = type.GetProperty(part);
            if (info == null) { return null; }

            obj = info.GetValue(obj, null);
        }

        return obj;
    }

    IEnumerable<object> ReturnIEnumerable(object obj)
    {
        return ((IEnumerable<object>)obj).Cast<object>().ToList();
    }
}

    <h2>Reisdocument</h2>


<script type="text/javascript">

    function colorRelevant(id) {

        $(".searchBox").css("border", "1px solid black").css("background", "white");;

        if (id === "reisdocumentNummerZoek") {
            $("#reisdocumentNummerZoek").css("border", "2px solid green").css("background", "lightgreen");
        }


    };

</script>

@using (Html.BeginForm("Zoek", "Reisdocument", FormMethod.Post))
{
    <form>
        <div>
            <input onfocus="colorRelevant(this.id)" class="searchBox" type="text" placeholder="reisdocumentNummer" id="reisdocumentNummerZoek" name="reisdocumentNummerZoek" required>
            <input onfocus="colorRelevant(this.id)" class="searchBox" type="text" placeholder="apiVersion" id="apiVersionZoek" name="apiVersionZoek">

            <button type="submit">Zoek</button>

        </div>
    </form>
}

<div>
    Het ophalen van de gegevens van een REISDOCUMENT op basis van het reisdocumentnummer. <br />
    Is nog niet ge"implementeerd bij BRP
</div>

<table class="table">
    <thead>
        <tr>
            <th>@Html.ValidationMessage("Oei")</th>
            <th style="color:red">
                @if (ViewBag.ResponseError != null)
                {
                    @ViewBag.ResponseError;
                }
            </th>
        </tr>
    </thead>

    @if (ViewBag.ResponseError == null)
    {
        <tbody>
            <br />

            @foreach (var modelItemProperty in typeof(Bip.Reisdocument).GetProperties().ToList())
            {
                <tr>
                    <td style="font-weight:600">@Html.DisplayFor(m => modelItemProperty.Name)</td>
                    <td>@modelItemProperty.GetValue(Model);</td>
                </tr>

                if ((!modelItemProperty.PropertyType.Namespace.StartsWith("System") || modelItemProperty.PropertyType.Namespace.Contains("Collection")) && !modelItemProperty.PropertyType.Name.Contains("IDictionary"))
                {
                    @foreach (var subProperty in modelItemProperty.PropertyType.GetProperties().ToList())
                    {
                        var subPropertyObject = @ReturnProp(modelItemProperty.Name, Model); ;
                        Object subPropertyValue = null;

                        if (modelItemProperty.PropertyType.Name.Contains("Collection"))
                        {
                            var collectionInSubproperty = modelItemProperty.GetValue(Model);
                            if (collectionInSubproperty != null)
                            {
                                var collection = ReturnIEnumerable(collectionInSubproperty);

                                foreach (var subPropertyCollectionItem in collection)
                                {
                                    foreach (var propertyOfSubPropertyCollectionItem in subPropertyCollectionItem.GetType().GetProperties().ToList())
                                    {
                                        <tr>
                                            <td style="color:lightslategray; font-size:80%"><i>@Html.DisplayFor(m => propertyOfSubPropertyCollectionItem.Name)</i></td>
                                            <td style="color:lightslategray; font-size:80%">@propertyOfSubPropertyCollectionItem.GetValue(subPropertyCollectionItem)</td>
                                        </tr>
                                    }
                                }
                            }
                        }

                        else if (subPropertyObject != null)
                        {
                            subPropertyValue = subPropertyObject.GetType().GetProperty(subProperty.Name).GetValue(subPropertyObject, null);
                        }

                        <tr>
                            <td><i>@Html.DisplayFor(m => subProperty.Name)</i></td>
                            <td>@subPropertyValue</td>
                        </tr>
                    }
                }
            }


        </tbody>
    }
</table>
